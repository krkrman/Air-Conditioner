
new drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00001102  00001196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080008e  0080008e  000011c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fac  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a9  00000000  00000000  0000451c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a31  00000000  00000000  000057c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a0c  00000000  00000000  000071f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000170d  00000000  00000000  00007c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028a6  00000000  00000000  00009311  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000bbb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__vector_1>
       8:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_2>
       c:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_7>
      20:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_8>
      24:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_9>
      28:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_10>
      2c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
      8a:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <reInitRows>:
#include "../../MCAL/DIO/DIO_interface.h"

#include "KEYPAD_interface.h"

static void reInitRows(Keypad_t* keypad)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	8c 01       	movw	r16, r24
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++)
      9c:	c0 e0       	ldi	r28, 0x00	; 0
      9e:	d0 e0       	ldi	r29, 0x00	; 0
      a0:	10 c0       	rjmp	.+32     	; 0xc2 <reInitRows+0x30>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
      a2:	f8 01       	movw	r30, r16
      a4:	a4 81       	ldd	r26, Z+4	; 0x04
      a6:	b5 81       	ldd	r27, Z+5	; 0x05
      a8:	ac 0f       	add	r26, r28
      aa:	bd 1f       	adc	r27, r29
      ac:	82 81       	ldd	r24, Z+2	; 0x02
      ae:	93 81       	ldd	r25, Z+3	; 0x03
      b0:	fc 01       	movw	r30, r24
      b2:	ec 0f       	add	r30, r28
      b4:	fd 1f       	adc	r31, r29
      b6:	41 e0       	ldi	r20, 0x01	; 1
      b8:	6c 91       	ld	r22, X
      ba:	80 81       	ld	r24, Z
      bc:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>

#include "KEYPAD_interface.h"

static void reInitRows(Keypad_t* keypad)
{
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++)
      c0:	21 96       	adiw	r28, 0x01	; 1
      c2:	f8 01       	movw	r30, r16
      c4:	80 81       	ld	r24, Z
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	c8 17       	cp	r28, r24
      ca:	d9 07       	cpc	r29, r25
      cc:	54 f3       	brlt	.-44     	; 0xa2 <reInitRows+0x10>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
}
      ce:	df 91       	pop	r29
      d0:	cf 91       	pop	r28
      d2:	1f 91       	pop	r17
      d4:	0f 91       	pop	r16
      d6:	08 95       	ret

000000d8 <checkKeys>:

static s8 checkKeys(Keypad_t* keypad , u8 rowIndex)
{
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	8c 01       	movw	r16, r24
      e4:	f6 2e       	mov	r15, r22
	for (int colIndex = 0 ; colIndex < keypad->columns ; colIndex++ )
      e6:	c0 e0       	ldi	r28, 0x00	; 0
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	20 c0       	rjmp	.+64     	; 0x12c <checkKeys+0x54>
	{
		if (DIO_u8GetPinValue(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex]) == 0)
      ec:	f8 01       	movw	r30, r16
      ee:	a0 85       	ldd	r26, Z+8	; 0x08
      f0:	b1 85       	ldd	r27, Z+9	; 0x09
      f2:	ac 0f       	add	r26, r28
      f4:	bd 1f       	adc	r27, r29
      f6:	86 81       	ldd	r24, Z+6	; 0x06
      f8:	97 81       	ldd	r25, Z+7	; 0x07
      fa:	fc 01       	movw	r30, r24
      fc:	ec 0f       	add	r30, r28
      fe:	fd 1f       	adc	r31, r29
     100:	6c 91       	ld	r22, X
     102:	80 81       	ld	r24, Z
     104:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_u8GetPinValue>
     108:	81 11       	cpse	r24, r1
     10a:	0f c0       	rjmp	.+30     	; 0x12a <checkKeys+0x52>
			return keypad->map[rowIndex][colIndex];
     10c:	f8 01       	movw	r30, r16
     10e:	22 85       	ldd	r18, Z+10	; 0x0a
     110:	33 85       	ldd	r19, Z+11	; 0x0b
     112:	8f 2d       	mov	r24, r15
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	82 0f       	add	r24, r18
     120:	93 1f       	adc	r25, r19
     122:	c8 0f       	add	r28, r24
     124:	d9 1f       	adc	r29, r25
     126:	88 81       	ld	r24, Y
     128:	08 c0       	rjmp	.+16     	; 0x13a <checkKeys+0x62>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
}

static s8 checkKeys(Keypad_t* keypad , u8 rowIndex)
{
	for (int colIndex = 0 ; colIndex < keypad->columns ; colIndex++ )
     12a:	21 96       	adiw	r28, 0x01	; 1
     12c:	f8 01       	movw	r30, r16
     12e:	81 81       	ldd	r24, Z+1	; 0x01
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	c8 17       	cp	r28, r24
     134:	d9 07       	cpc	r29, r25
     136:	d4 f2       	brlt	.-76     	; 0xec <checkKeys+0x14>
	{
		if (DIO_u8GetPinValue(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex]) == 0)
			return keypad->map[rowIndex][colIndex];
	}
	return -1;
     138:	8f ef       	ldi	r24, 0xFF	; 255
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	ff 90       	pop	r15
     144:	08 95       	ret

00000146 <KEYPAD_voidInit>:

void KEYPAD_voidInit(Keypad_t* keypad){
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	ec 01       	movw	r28, r24
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++){
     150:	00 e0       	ldi	r16, 0x00	; 0
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	1c c0       	rjmp	.+56     	; 0x18e <KEYPAD_voidInit+0x48>
		DIO_voidSetPinDirection(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , OUTPUT);
     156:	ac 81       	ldd	r26, Y+4	; 0x04
     158:	bd 81       	ldd	r27, Y+5	; 0x05
     15a:	a0 0f       	add	r26, r16
     15c:	b1 1f       	adc	r27, r17
     15e:	ea 81       	ldd	r30, Y+2	; 0x02
     160:	fb 81       	ldd	r31, Y+3	; 0x03
     162:	e0 0f       	add	r30, r16
     164:	f1 1f       	adc	r31, r17
     166:	41 e0       	ldi	r20, 0x01	; 1
     168:	6c 91       	ld	r22, X
     16a:	80 81       	ld	r24, Z
     16c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
     170:	ac 81       	ldd	r26, Y+4	; 0x04
     172:	bd 81       	ldd	r27, Y+5	; 0x05
     174:	a0 0f       	add	r26, r16
     176:	b1 1f       	adc	r27, r17
     178:	ea 81       	ldd	r30, Y+2	; 0x02
     17a:	fb 81       	ldd	r31, Y+3	; 0x03
     17c:	e0 0f       	add	r30, r16
     17e:	f1 1f       	adc	r31, r17
     180:	41 e0       	ldi	r20, 0x01	; 1
     182:	6c 91       	ld	r22, X
     184:	80 81       	ld	r24, Z
     186:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
	}
	return -1;
}

void KEYPAD_voidInit(Keypad_t* keypad){
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++){
     18a:	0f 5f       	subi	r16, 0xFF	; 255
     18c:	1f 4f       	sbci	r17, 0xFF	; 255
     18e:	88 81       	ld	r24, Y
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	08 17       	cp	r16, r24
     194:	19 07       	cpc	r17, r25
     196:	fc f2       	brlt	.-66     	; 0x156 <KEYPAD_voidInit+0x10>
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	0f c0       	rjmp	.+30     	; 0x1bc <KEYPAD_voidInit+0x76>
		DIO_voidSetPinDirection(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , OUTPUT);
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
	}
	
	for(int colIndex = 0 ; colIndex < keypad->columns ; colIndex++)
		DIO_voidSetPinDirection(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex] , INPUT_PULL_UP);
     19e:	a8 85       	ldd	r26, Y+8	; 0x08
     1a0:	b9 85       	ldd	r27, Y+9	; 0x09
     1a2:	a0 0f       	add	r26, r16
     1a4:	b1 1f       	adc	r27, r17
     1a6:	ee 81       	ldd	r30, Y+6	; 0x06
     1a8:	ff 81       	ldd	r31, Y+7	; 0x07
     1aa:	e0 0f       	add	r30, r16
     1ac:	f1 1f       	adc	r31, r17
     1ae:	42 e0       	ldi	r20, 0x02	; 2
     1b0:	6c 91       	ld	r22, X
     1b2:	80 81       	ld	r24, Z
     1b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
	for(int rowIndex = 0 ; rowIndex < keypad->rows ; rowIndex++){
		DIO_voidSetPinDirection(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , OUTPUT);
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , HIGH);
	}
	
	for(int colIndex = 0 ; colIndex < keypad->columns ; colIndex++)
     1b8:	0f 5f       	subi	r16, 0xFF	; 255
     1ba:	1f 4f       	sbci	r17, 0xFF	; 255
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	08 17       	cp	r16, r24
     1c2:	19 07       	cpc	r17, r25
     1c4:	64 f3       	brlt	.-40     	; 0x19e <KEYPAD_voidInit+0x58>
		DIO_voidSetPinDirection(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex] , INPUT_PULL_UP);
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <KEYPAD_u8GetKey>:

s8 KEYPAD_u8GetKey(Keypad_t* keypad)
{
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	8c 01       	movw	r16, r24
	for (int rowIndex = 0 ; rowIndex< keypad->rows;rowIndex++)
     1de:	c0 e0       	ldi	r28, 0x00	; 0
     1e0:	d0 e0       	ldi	r29, 0x00	; 0
     1e2:	24 c0       	rjmp	.+72     	; 0x22c <KEYPAD_u8GetKey+0x5c>
	{
		reInitRows(keypad);
     1e4:	c8 01       	movw	r24, r16
     1e6:	0e 94 49 00 	call	0x92	; 0x92 <reInitRows>
		DIO_voidSetPinValue(keypad->rowPins[rowIndex] , keypad->rowPorts[rowIndex] , LOW);
     1ea:	f8 01       	movw	r30, r16
     1ec:	a4 81       	ldd	r26, Z+4	; 0x04
     1ee:	b5 81       	ldd	r27, Z+5	; 0x05
     1f0:	ac 0f       	add	r26, r28
     1f2:	bd 1f       	adc	r27, r29
     1f4:	82 81       	ldd	r24, Z+2	; 0x02
     1f6:	93 81       	ldd	r25, Z+3	; 0x03
     1f8:	fc 01       	movw	r30, r24
     1fa:	ec 0f       	add	r30, r28
     1fc:	fd 1f       	adc	r31, r29
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	6c 91       	ld	r22, X
     202:	80 81       	ld	r24, Z
     204:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
		s8 characterPressed = checkKeys(keypad , rowIndex);
     208:	ec 2e       	mov	r14, r28
     20a:	6c 2f       	mov	r22, r28
     20c:	c8 01       	movw	r24, r16
     20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <checkKeys>
     212:	f8 2e       	mov	r15, r24
		if (characterPressed != (s8)-1)
     214:	ff ef       	ldi	r31, 0xFF	; 255
     216:	8f 17       	cp	r24, r31
     218:	41 f0       	breq	.+16     	; 0x22a <KEYPAD_u8GetKey+0x5a>
		{
			// to block the code till user let the button
			while (checkKeys(keypad , rowIndex) != (s8)-1);
     21a:	6e 2d       	mov	r22, r14
     21c:	c8 01       	movw	r24, r16
     21e:	0e 94 6c 00 	call	0xd8	; 0xd8 <checkKeys>
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	d1 f7       	brne	.-12     	; 0x21a <KEYPAD_u8GetKey+0x4a>
			
			return characterPressed;
     226:	8f 2d       	mov	r24, r15
     228:	08 c0       	rjmp	.+16     	; 0x23a <KEYPAD_u8GetKey+0x6a>
		DIO_voidSetPinDirection(keypad->columnPins[colIndex] , keypad->columnPorts[colIndex] , INPUT_PULL_UP);
}

s8 KEYPAD_u8GetKey(Keypad_t* keypad)
{
	for (int rowIndex = 0 ; rowIndex< keypad->rows;rowIndex++)
     22a:	21 96       	adiw	r28, 0x01	; 1
     22c:	f8 01       	movw	r30, r16
     22e:	80 81       	ld	r24, Z
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	c8 17       	cp	r28, r24
     234:	d9 07       	cpc	r29, r25
     236:	b4 f2       	brlt	.-84     	; 0x1e4 <KEYPAD_u8GetKey+0x14>
			while (checkKeys(keypad , rowIndex) != (s8)-1);
			
			return characterPressed;
		}
	}
	return -1;
     238:	8f ef       	ldi	r24, 0xFF	; 255
}
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	08 95       	ret

00000248 <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF); /* Cursor Off */
	LCD_sendCommand(CLEAR_COMMAND); /* Clearing The LCD*/

}
void LCD_sendCommand(uint8_t command)
{
     248:	cf 93       	push	r28
     24a:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(RS,LCD_CTRL_PORT,LOW);
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	63 e0       	ldi	r22, 0x03	; 3
     250:	85 e0       	ldi	r24, 0x05	; 5
     252:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(RW,LCD_CTRL_PORT,LOW);
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	63 e0       	ldi	r22, 0x03	; 3
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     260:	89 ef       	ldi	r24, 0xF9	; 249
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <LCD_sendCommand+0x1c>
     268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_sendCommand+0x22>
     26a:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(E,LCD_CTRL_PORT,HIGH);
     26c:	41 e0       	ldi	r20, 0x01	; 1
     26e:	63 e0       	ldi	r22, 0x03	; 3
     270:	87 e0       	ldi	r24, 0x07	; 7
     272:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
     276:	89 ef       	ldi	r24, 0xF9	; 249
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_sendCommand+0x32>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_sendCommand+0x38>
     280:	00 00       	nop
	_delay_ms(1);
	#if (DATA_BITS_MODE == 8)
	DIO_voidSetPortValue(LCD_DATA_PORT,command);
     282:	6c 2f       	mov	r22, r28
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 14 05 	call	0xa28	; 0xa28 <DIO_voidSetPortValue>
     28a:	89 ef       	ldi	r24, 0xF9	; 249
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <LCD_sendCommand+0x46>
     292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_sendCommand+0x4c>
     294:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(E,LCD_CTRL_PORT,LOW);
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	63 e0       	ldi	r22, 0x03	; 3
     29a:	87 e0       	ldi	r24, 0x07	; 7
     29c:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
     2a0:	89 ef       	ldi	r24, 0xF9	; 249
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_sendCommand+0x5c>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_sendCommand+0x62>
     2aa:	00 00       	nop
	_delay_ms(1);
#endif



}
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <LCD_init>:


void LCD_init(void)
{
	/* Control Port as an Output */
	DIO_voidSetPinDirection(E,LCD_CTRL_PORT,OUTPUT);
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	63 e0       	ldi	r22, 0x03	; 3
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RS,LCD_CTRL_PORT,OUTPUT);
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	63 e0       	ldi	r22, 0x03	; 3
     2be:	85 e0       	ldi	r24, 0x05	; 5
     2c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RW,LCD_CTRL_PORT,OUTPUT);
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	63 e0       	ldi	r22, 0x03	; 3
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>

#if (DATA_BITS_MODE == 8)
	DIO_voidSetPortDirection(LCD_DATA_PORT,OUTPUT); /* Data Port as an Output */
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	0e 94 4a 04 	call	0x894	; 0x894 <DIO_voidSetPortDirection>
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /*Configure LCD For 8 Bit Data Mode + 2 Line LCD */
     2d6:	88 e3       	ldi	r24, 0x38	; 56
     2d8:	0e 94 24 01 	call	0x248	; 0x248 <LCD_sendCommand>
	#else
	DIO_initHalfPort(LCD_DATA_PORT,OUTPUT,LOWER);
	#endif
#endif

	LCD_sendCommand(CURSOR_OFF); /* Cursor Off */
     2dc:	8c e0       	ldi	r24, 0x0C	; 12
     2de:	0e 94 24 01 	call	0x248	; 0x248 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clearing The LCD*/
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 24 01 	call	0x248	; 0x248 <LCD_sendCommand>
     2e8:	08 95       	ret

000002ea <LCD_displayCharacter>:



}
void LCD_displayCharacter(uint8_t data)
{
     2ea:	cf 93       	push	r28
     2ec:	c8 2f       	mov	r28, r24
		DIO_voidSetPinValue(RS,LCD_CTRL_PORT,HIGH);
     2ee:	41 e0       	ldi	r20, 0x01	; 1
     2f0:	63 e0       	ldi	r22, 0x03	; 3
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(RW,LCD_CTRL_PORT,LOW);
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	63 e0       	ldi	r22, 0x03	; 3
     2fc:	86 e0       	ldi	r24, 0x06	; 6
     2fe:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
     302:	89 ef       	ldi	r24, 0xF9	; 249
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <LCD_displayCharacter+0x1c>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_displayCharacter+0x22>
     30c:	00 00       	nop
		_delay_ms(1);
		DIO_voidSetPinValue(E,LCD_CTRL_PORT,HIGH);
     30e:	41 e0       	ldi	r20, 0x01	; 1
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	87 e0       	ldi	r24, 0x07	; 7
     314:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
     318:	89 ef       	ldi	r24, 0xF9	; 249
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_displayCharacter+0x32>
     320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_displayCharacter+0x38>
     322:	00 00       	nop
		_delay_ms(1);
		#if (DATA_BITS_MODE == 8)
		DIO_voidSetPortValue(LCD_DATA_PORT,data);
     324:	6c 2f       	mov	r22, r28
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	0e 94 14 05 	call	0xa28	; 0xa28 <DIO_voidSetPortValue>
     32c:	89 ef       	ldi	r24, 0xF9	; 249
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <LCD_displayCharacter+0x46>
     334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_displayCharacter+0x4c>
     336:	00 00       	nop
		_delay_ms(1);
		DIO_voidSetPinValue(E,LCD_CTRL_PORT,LOW);
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	63 e0       	ldi	r22, 0x03	; 3
     33c:	87 e0       	ldi	r24, 0x07	; 7
     33e:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
     342:	89 ef       	ldi	r24, 0xF9	; 249
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <LCD_displayCharacter+0x5c>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_displayCharacter+0x62>
     34c:	00 00       	nop
		_delay_ms(1);
		DIO_write(LCD_CTRL_PORT,E,LOW);
		_delay_ms(1);
	#endif

}
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <LCD_displayString>:

void LCD_displayString(const uint8_t *Str)
{
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	8c 01       	movw	r16, r24
	uint8_t i=0;
     35a:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
     35c:	03 c0       	rjmp	.+6      	; 0x364 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
     35e:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_displayCharacter>
		i++;
     362:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const uint8_t *Str)
{
	uint8_t i=0;
	while(Str[i] != '\0')
     364:	f8 01       	movw	r30, r16
     366:	ec 0f       	add	r30, r28
     368:	f1 1d       	adc	r31, r1
     36a:	80 81       	ld	r24, Z
     36c:	81 11       	cpse	r24, r1
     36e:	f7 cf       	rjmp	.-18     	; 0x35e <LCD_displayString+0xc>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	08 95       	ret

00000378 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); /* Clearing The LCD*/
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 24 01 	call	0x248	; 0x248 <LCD_sendCommand>
     37e:	08 95       	ret

00000380 <getDegree>:
#include "../../MCAL/ADC/ADC_interface.h"
#include "LM35_interface.h"


f32 static getDegree(u16 adcValue){
	f32 voltage = (f32) (adcValue * 5.0 / 1024.0 );
     380:	bc 01       	movw	r22, r24
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 5e 07 	call	0xebc	; 0xebc <__floatunsisf>
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 ea       	ldi	r20, 0xA0	; 160
     390:	50 e4       	ldi	r21, 0x40	; 64
     392:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	5a e3       	ldi	r21, 0x3A	; 58
     39e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
	return voltage*100;
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	48 ec       	ldi	r20, 0xC8	; 200
     3a8:	52 e4       	ldi	r21, 0x42	; 66
     3aa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
}
     3ae:	08 95       	ret

000003b0 <LM35_voidInit>:
void LM35_voidInit()
{
	ADC_voidInit(ADC_MODE_SINGLE_CONVERSION , ADC_AUTO_TRIGGER_FREE_RUNNING , ADC_PRESCALAR_DIV_8);
     3b0:	43 e0       	ldi	r20, 0x03	; 3
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 09 03 	call	0x612	; 0x612 <ADC_voidInit>
     3ba:	08 95       	ret

000003bc <LM35_u8GetTemp>:
}
u8 LM35_u8GetTemp(LM35* lm35)
{
	ADC_voidStartConversion(ADC_CHANNEL_SINGLE_0);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_voidStartConversion>
	return (u8)getDegree(ADC_u16ReadChannel());
     3c2:	0e 94 2f 03 	call	0x65e	; 0x65e <ADC_u16ReadChannel>
     3c6:	0e 94 c0 01 	call	0x380	; 0x380 <getDegree>
     3ca:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fixunssfsi>
     3ce:	86 2f       	mov	r24, r22
}
     3d0:	08 95       	ret

000003d2 <MOTOR_voidInit>:
#include "../../MCAL/TIMER0/TIMER0_interface.h"
#include "../../LIB/STD_TYPES.h"
#include "MOTOR_interface.h"

void MOTOR_voidInit(Motor_t* motor)
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
	TIMER0_voidInit(TIMER0_CTC_MODE , TIMER0_CTC_DISCONNECT , TIMER0_PRESCALAR_64 , 0);
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	43 e0       	ldi	r20, 0x03	; 3
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 d5 05 	call	0xbaa	; 0xbaa <TIMER0_voidInit>
	DIO_voidSetPinDirection(motor->pin1 , motor->port , OUTPUT);
     3e4:	41 e0       	ldi	r20, 0x01	; 1
     3e6:	68 81       	ld	r22, Y
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(motor->pin2 , motor->port , OUTPUT);	
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	68 81       	ld	r22, Y
     3f2:	8a 81       	ldd	r24, Y+2	; 0x02
     3f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <MOTOR_voidRotateWithSoftwarePWM>:

void MOTOR_voidRotateWithSoftwarePWM(Motor_t* motor , u8 dutyCycle , RotationDirection_t rotationDirection)
{
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
     406:	16 2f       	mov	r17, r22
	if (rotationDirection)
     408:	44 23       	and	r20, r20
     40a:	59 f0       	breq	.+22     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		DIO_voidSetPinValue(motor->pin1 , motor->port , LOW);
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	68 81       	ld	r22, Y
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(motor->pin2 , motor->port , HIGH);
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	68 81       	ld	r22, Y
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
     420:	0a c0       	rjmp	.+20     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	}else 
	{
		DIO_voidSetPinValue(motor->pin1 , motor->port , HIGH);
     422:	41 e0       	ldi	r20, 0x01	; 1
     424:	68 81       	ld	r22, Y
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(motor->pin2 , motor->port , LOW);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	68 81       	ld	r22, Y
     430:	8a 81       	ldd	r24, Y+2	; 0x02
     432:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
	}
	TIMER0_voidSoftwarePWM(motor->port , motor->PWM_pin , dutyCycle);
     436:	41 2f       	mov	r20, r17
     438:	6b 81       	ldd	r22, Y+3	; 0x03
     43a:	88 81       	ld	r24, Y
     43c:	0e 94 10 06 	call	0xc20	; 0xc20 <TIMER0_voidSoftwarePWM>
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <MOTOR_voidStop>:

void MOTOR_voidStop(Motor_t* motor)
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	ec 01       	movw	r28, r24
	DIO_voidSetPinValue(motor->pin1 , motor->port , LOW);
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	68 81       	ld	r22, Y
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(motor->pin2 , motor->port , LOW);
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	68 81       	ld	r22, Y
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <displayLCDInitalState>:
#include <util/delay.h>


void displayLCDInitalState()
{
	LCD_clearScreen();
     468:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_clearScreen>
	LCD_displayString("Enter degree:");
     46c:	80 e7       	ldi	r24, 0x70	; 112
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_displayString>
     474:	08 95       	ret

00000476 <displayDegreeWarning>:
}
void displayDegreeWarning()
{
	LCD_clearScreen();
     476:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_clearScreen>
	LCD_displayString("degree is 15:30");
     47a:	8e e7       	ldi	r24, 0x7E	; 126
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_displayString>
     482:	2f e7       	ldi	r18, 0x7F	; 127
     484:	8a e1       	ldi	r24, 0x1A	; 26
     486:	96 e0       	ldi	r25, 0x06	; 6
     488:	21 50       	subi	r18, 0x01	; 1
     48a:	80 40       	sbci	r24, 0x00	; 0
     48c:	90 40       	sbci	r25, 0x00	; 0
     48e:	e1 f7       	brne	.-8      	; 0x488 <displayDegreeWarning+0x12>
     490:	00 c0       	rjmp	.+0      	; 0x492 <displayDegreeWarning+0x1c>
     492:	00 00       	nop
     494:	08 95       	ret

00000496 <displayNumber>:
	_delay_ms(2000);
}

void displayNumber(u8* stringDegree , u8* index , s8 charater){
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
     49c:	fb 01       	movw	r30, r22
	stringDegree[(*index)++] = (u8)charater;
     49e:	80 81       	ld	r24, Z
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	98 0f       	add	r25, r24
     4a4:	90 83       	st	Z, r25
     4a6:	de 01       	movw	r26, r28
     4a8:	a8 0f       	add	r26, r24
     4aa:	b1 1d       	adc	r27, r1
     4ac:	4c 93       	st	X, r20
	stringDegree[*index] = '\0';
     4ae:	80 81       	ld	r24, Z
     4b0:	fe 01       	movw	r30, r28
     4b2:	e8 0f       	add	r30, r24
     4b4:	f1 1d       	adc	r31, r1
     4b6:	10 82       	st	Z, r1
	LCD_clearScreen();
     4b8:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_clearScreen>
	LCD_displayString(stringDegree);
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_displayString>
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <displayResutlt>:

void displayResutlt(u8* desiredDegree , u8* stringDegree)
{
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
     4ce:	cb 01       	movw	r24, r22
	*desiredDegree = (u8)atoi(stringDegree);
     4d0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <atoi>
     4d4:	88 83       	st	Y, r24
	if (*desiredDegree > 30 || *desiredDegree < 15)
     4d6:	8f 50       	subi	r24, 0x0F	; 15
     4d8:	80 31       	cpi	r24, 0x10	; 16
     4da:	10 f0       	brcs	.+4      	; 0x4e0 <displayResutlt+0x18>
	{
		displayDegreeWarning();
     4dc:	0e 94 3b 02 	call	0x476	; 0x476 <displayDegreeWarning>
	}
	displayLCDInitalState();
     4e0:	0e 94 34 02 	call	0x468	; 0x468 <displayLCDInitalState>
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <main>:
int main(void)
{	
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	e8 97       	sbiw	r28, 0x38	; 56
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
	/********* KEYPAD INIT ************************/
	Keypad_t keyPad;

	keyPad.rows = 4;
     4fe:	84 e0       	ldi	r24, 0x04	; 4
     500:	89 83       	std	Y+1, r24	; 0x01
	keyPad.columns = 4;
     502:	8a 83       	std	Y+2, r24	; 0x02
	u8 rowPorts[4];
	
	u8 columnPins[4];
	u8 columnPorts[4];
	
	for (int i = 0; i < 4 ;i++)
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	20 c0       	rjmp	.+64     	; 0x54a <main+0x60>
	{
		rowPins[i] = i;
     50a:	ed e0       	ldi	r30, 0x0D	; 13
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	ec 0f       	add	r30, r28
     510:	fd 1f       	adc	r31, r29
     512:	e8 0f       	add	r30, r24
     514:	f9 1f       	adc	r31, r25
     516:	80 83       	st	Z, r24
		rowPorts[i] = PORTC;
     518:	e1 e1       	ldi	r30, 0x11	; 17
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	ec 0f       	add	r30, r28
     51e:	fd 1f       	adc	r31, r29
     520:	e8 0f       	add	r30, r24
     522:	f9 1f       	adc	r31, r25
     524:	22 e0       	ldi	r18, 0x02	; 2
     526:	20 83       	st	Z, r18
		columnPins[i] = i+4;
     528:	e5 e1       	ldi	r30, 0x15	; 21
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	ec 0f       	add	r30, r28
     52e:	fd 1f       	adc	r31, r29
     530:	e8 0f       	add	r30, r24
     532:	f9 1f       	adc	r31, r25
     534:	34 e0       	ldi	r19, 0x04	; 4
     536:	38 0f       	add	r19, r24
     538:	30 83       	st	Z, r19
		columnPorts[i] = PORTC;
     53a:	e9 e1       	ldi	r30, 0x19	; 25
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	ec 0f       	add	r30, r28
     540:	fd 1f       	adc	r31, r29
     542:	e8 0f       	add	r30, r24
     544:	f9 1f       	adc	r31, r25
     546:	20 83       	st	Z, r18
	u8 rowPorts[4];
	
	u8 columnPins[4];
	u8 columnPorts[4];
	
	for (int i = 0; i < 4 ;i++)
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	84 30       	cpi	r24, 0x04	; 4
     54c:	91 05       	cpc	r25, r1
     54e:	ec f2       	brlt	.-70     	; 0x50a <main+0x20>
		rowPins[i] = i;
		rowPorts[i] = PORTC;
		columnPins[i] = i+4;
		columnPorts[i] = PORTC;
	}
	keyPad.rowPins = rowPins;
     550:	ce 01       	movw	r24, r28
     552:	0d 96       	adiw	r24, 0x0d	; 13
     554:	9c 83       	std	Y+4, r25	; 0x04
     556:	8b 83       	std	Y+3, r24	; 0x03
	keyPad.columnPins = columnPins;
     558:	08 96       	adiw	r24, 0x08	; 8
     55a:	98 87       	std	Y+8, r25	; 0x08
     55c:	8f 83       	std	Y+7, r24	; 0x07
	keyPad.rowPorts = rowPorts;
     55e:	04 97       	sbiw	r24, 0x04	; 4
     560:	9e 83       	std	Y+6, r25	; 0x06
     562:	8d 83       	std	Y+5, r24	; 0x05
	keyPad.columnPorts = columnPorts;
     564:	08 96       	adiw	r24, 0x08	; 8
     566:	9a 87       	std	Y+10, r25	; 0x0a
     568:	89 87       	std	Y+9, r24	; 0x09
	
	u8 map[4][4] =
     56a:	80 e1       	ldi	r24, 0x10	; 16
     56c:	e0 e6       	ldi	r30, 0x60	; 96
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	de 01       	movw	r26, r28
     572:	5d 96       	adiw	r26, 0x1d	; 29
     574:	01 90       	ld	r0, Z+
     576:	0d 92       	st	X+, r0
     578:	8a 95       	dec	r24
     57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x8a>
	{{'7','8','9','/'},
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'c','0','=','+'}};
	keyPad.map = map;
     57c:	ce 01       	movw	r24, r28
     57e:	4d 96       	adiw	r24, 0x1d	; 29
     580:	9c 87       	std	Y+12, r25	; 0x0c
     582:	8b 87       	std	Y+11, r24	; 0x0b
	
	KEYPAD_voidInit(&keyPad);
     584:	4c 97       	sbiw	r24, 0x1c	; 28
     586:	0e 94 a3 00 	call	0x146	; 0x146 <KEYPAD_voidInit>
		
	/********************************************************************/
	LM35 lm35 = {.analogPin = 0};
     58a:	1d a6       	std	Y+45, r1	; 0x2d
	LM35_voidInit();	
     58c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LM35_voidInit>
		
	LCD_init();
     590:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_init>
	displayLCDInitalState();
     594:	0e 94 34 02 	call	0x468	; 0x468 <displayLCDInitalState>
	
	Motor_t motor = {.pin1 = 0 , .pin2 = 2 ,. PWM_pin = 1 , .port = PORTD};
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	8e a7       	std	Y+46, r24	; 0x2e
     59c:	1f a6       	std	Y+47, r1	; 0x2f
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	88 ab       	std	Y+48, r24	; 0x30
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	89 ab       	std	Y+49, r24	; 0x31
	MOTOR_voidInit(&motor);
     5a6:	ce 01       	movw	r24, r28
     5a8:	8e 96       	adiw	r24, 0x2e	; 46
     5aa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <MOTOR_voidInit>
	
	u8 stringDegree[5];
	u8 index = 0;
     5ae:	1f aa       	std	Y+55, r1	; 0x37
	u8 desiredDegree = 100;
     5b0:	84 e6       	ldi	r24, 0x64	; 100
     5b2:	88 af       	std	Y+56, r24	; 0x38
	u8 realDegree = 0;

    while (1) 
    {
		realDegree = LM35_u8GetTemp(&lm35);
     5b4:	ce 01       	movw	r24, r28
     5b6:	8d 96       	adiw	r24, 0x2d	; 45
     5b8:	0e 94 de 01 	call	0x3bc	; 0x3bc <LM35_u8GetTemp>
     5bc:	18 2f       	mov	r17, r24
		
		s8 character = KEYPAD_u8GetKey(&keyPad);
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <KEYPAD_u8GetKey>
		if (character != (s8)-1 && character != '=')
     5c6:	8f 3f       	cpi	r24, 0xFF	; 255
     5c8:	59 f0       	breq	.+22     	; 0x5e0 <main+0xf6>
     5ca:	8d 33       	cpi	r24, 0x3D	; 61
     5cc:	49 f0       	breq	.+18     	; 0x5e0 <main+0xf6>
		{
			displayNumber(stringDegree , &index , character);
     5ce:	48 2f       	mov	r20, r24
     5d0:	be 01       	movw	r22, r28
     5d2:	69 5c       	subi	r22, 0xC9	; 201
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	ce 01       	movw	r24, r28
     5d8:	c2 96       	adiw	r24, 0x32	; 50
     5da:	0e 94 4b 02 	call	0x496	; 0x496 <displayNumber>
     5de:	0a c0       	rjmp	.+20     	; 0x5f4 <main+0x10a>

		} else if (character == '=')
     5e0:	8d 33       	cpi	r24, 0x3D	; 61
     5e2:	41 f4       	brne	.+16     	; 0x5f4 <main+0x10a>
		{
			index = 0;
     5e4:	1f aa       	std	Y+55, r1	; 0x37
			displayResutlt(&desiredDegree , stringDegree);
     5e6:	be 01       	movw	r22, r28
     5e8:	6e 5c       	subi	r22, 0xCE	; 206
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	ce 01       	movw	r24, r28
     5ee:	c8 96       	adiw	r24, 0x38	; 56
     5f0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <displayResutlt>
		}
		
		if (realDegree > desiredDegree)
     5f4:	88 ad       	ldd	r24, Y+56	; 0x38
     5f6:	81 17       	cp	r24, r17
     5f8:	38 f4       	brcc	.+14     	; 0x608 <main+0x11e>
		{
			MOTOR_voidRotateWithSoftwarePWM(&motor , 100 , ROTATION_CLOCK_WISE);
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	64 e6       	ldi	r22, 0x64	; 100
     5fe:	ce 01       	movw	r24, r28
     600:	8e 96       	adiw	r24, 0x2e	; 46
     602:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MOTOR_voidRotateWithSoftwarePWM>
     606:	d6 cf       	rjmp	.-84     	; 0x5b4 <main+0xca>
		}else
		{
			MOTOR_voidStop(&motor);
     608:	ce 01       	movw	r24, r28
     60a:	8e 96       	adiw	r24, 0x2e	; 46
     60c:	0e 94 24 02 	call	0x448	; 0x448 <MOTOR_voidStop>
     610:	d1 cf       	rjmp	.-94     	; 0x5b4 <main+0xca>

00000612 <ADC_voidInit>:
	//enable ADC interrupt
	SET_BIT(ADCSRA_REG , 3);
	// enable GIE
	SET_BIT(SREG_REG,7);
	ADC_callback = callback;
	ADC_voidStartConversion(channel);
     612:	90 e2       	ldi	r25, 0x20	; 32
     614:	89 9f       	mul	r24, r25
     616:	90 01       	movw	r18, r0
     618:	11 24       	eor	r1, r1
     61a:	24 2b       	or	r18, r20
     61c:	20 6c       	ori	r18, 0xC0	; 192
     61e:	26 b9       	out	0x06, r18	; 6
     620:	90 b7       	in	r25, 0x30	; 48
     622:	20 e2       	ldi	r18, 0x20	; 32
     624:	62 9f       	mul	r22, r18
     626:	b0 01       	movw	r22, r0
     628:	11 24       	eor	r1, r1
     62a:	69 2b       	or	r22, r25
     62c:	60 bf       	out	0x30, r22	; 48
     62e:	90 e4       	ldi	r25, 0x40	; 64
     630:	97 b9       	out	0x07, r25	; 7
     632:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <adcMode>
     636:	08 95       	ret

00000638 <ADC_voidStartConversion>:
     638:	cf 93       	push	r28
     63a:	c8 2f       	mov	r28, r24
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
     644:	87 b1       	in	r24, 0x07	; 7
     646:	80 7e       	andi	r24, 0xE0	; 224
     648:	87 b9       	out	0x07, r24	; 7
     64a:	87 b1       	in	r24, 0x07	; 7
     64c:	8c 2b       	or	r24, r28
     64e:	87 b9       	out	0x07, r24	; 7
     650:	86 b1       	in	r24, 0x06	; 6
     652:	80 64       	ori	r24, 0x40	; 64
     654:	86 b9       	out	0x06, r24	; 6
     656:	c0 93 8e 00 	sts	0x008E, r28	; 0x80008e <__data_end>
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <ADC_u16ReadChannel>:
     65e:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <adcMode>
     662:	81 11       	cpse	r24, r1
     664:	05 c0       	rjmp	.+10     	; 0x670 <ADC_u16ReadChannel+0x12>
     666:	36 99       	sbic	0x06, 6	; 6
     668:	fe cf       	rjmp	.-4      	; 0x666 <ADC_u16ReadChannel+0x8>
     66a:	84 b1       	in	r24, 0x04	; 4
     66c:	95 b1       	in	r25, 0x05	; 5
     66e:	08 95       	ret
     670:	84 b1       	in	r24, 0x04	; 4
     672:	95 b1       	in	r25, 0x05	; 5
     674:	08 95       	ret

00000676 <__vector_16>:
};

void ADC_ISR_VECTOR(void)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	2f 93       	push	r18
     682:	3f 93       	push	r19
     684:	4f 93       	push	r20
     686:	5f 93       	push	r21
     688:	6f 93       	push	r22
     68a:	7f 93       	push	r23
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
     694:	ef 93       	push	r30
     696:	ff 93       	push	r31
	if (ADC_callback != 0)
     698:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <ADC_callback>
     69c:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <ADC_callback+0x1>
     6a0:	30 97       	sbiw	r30, 0x00	; 0
     6a2:	71 f0       	breq	.+28     	; 0x6c0 <__vector_16+0x4a>
	{
		ADC_callback(ADCHL_REG);
     6a4:	84 b1       	in	r24, 0x04	; 4
     6a6:	95 b1       	in	r25, 0x05	; 5
     6a8:	09 95       	icall
		SET_BIT(ADCSRA_REG , 4);
     6aa:	86 b1       	in	r24, 0x06	; 6
     6ac:	80 61       	ori	r24, 0x10	; 16
     6ae:	86 b9       	out	0x06, r24	; 6
		if (adcMode == ADC_MODE_COUNTINOUS_CONVERSION)
     6b0:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <adcMode>
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <__vector_16+0x4a>
		{
			ADC_voidStartConversion(adcChannel);
     6b8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     6bc:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_voidStartConversion>
		}
	}
     6c0:	ff 91       	pop	r31
     6c2:	ef 91       	pop	r30
     6c4:	bf 91       	pop	r27
     6c6:	af 91       	pop	r26
     6c8:	9f 91       	pop	r25
     6ca:	8f 91       	pop	r24
     6cc:	7f 91       	pop	r23
     6ce:	6f 91       	pop	r22
     6d0:	5f 91       	pop	r21
     6d2:	4f 91       	pop	r20
     6d4:	3f 91       	pop	r19
     6d6:	2f 91       	pop	r18
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"


void DIO_voidSetPinDirection (u8 Copy_u8PinNumber,DIO_PORT_t DIO_port, u8 Copy_u8Direction)
{
	switch (DIO_port)
     6e2:	61 30       	cpi	r22, 0x01	; 1
     6e4:	e1 f1       	breq	.+120    	; 0x75e <DIO_voidSetPinDirection+0x7c>
     6e6:	38 f0       	brcs	.+14     	; 0x6f6 <DIO_voidSetPinDirection+0x14>
     6e8:	62 30       	cpi	r22, 0x02	; 2
     6ea:	09 f4       	brne	.+2      	; 0x6ee <DIO_voidSetPinDirection+0xc>
     6ec:	6c c0       	rjmp	.+216    	; 0x7c6 <DIO_voidSetPinDirection+0xe4>
     6ee:	63 30       	cpi	r22, 0x03	; 3
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <DIO_voidSetPinDirection+0x12>
     6f2:	9d c0       	rjmp	.+314    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     6f4:	08 95       	ret
	{
		case PORTA:
		if(Copy_u8Direction == OUTPUT)
     6f6:	41 30       	cpi	r20, 0x01	; 1
     6f8:	69 f4       	brne	.+26     	; 0x714 <DIO_voidSetPinDirection+0x32>
		{
			SET_BIT(DDRA_REG , Copy_u8PinNumber);
     6fa:	4a b3       	in	r20, 0x1a	; 26
     6fc:	21 e0       	ldi	r18, 0x01	; 1
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	b9 01       	movw	r22, r18
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_voidSetPinDirection+0x26>
     704:	66 0f       	add	r22, r22
     706:	77 1f       	adc	r23, r23
     708:	8a 95       	dec	r24
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_voidSetPinDirection+0x22>
     70c:	cb 01       	movw	r24, r22
     70e:	84 2b       	or	r24, r20
     710:	8a bb       	out	0x1a, r24	; 26
     712:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT)
     714:	41 11       	cpse	r20, r1
     716:	0e c0       	rjmp	.+28     	; 0x734 <DIO_voidSetPinDirection+0x52>
		{
			CLR_BIT(DDRA_REG , Copy_u8PinNumber);
     718:	4a b3       	in	r20, 0x1a	; 26
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	b9 01       	movw	r22, r18
     720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_voidSetPinDirection+0x44>
     722:	66 0f       	add	r22, r22
     724:	77 1f       	adc	r23, r23
     726:	8a 95       	dec	r24
     728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_voidSetPinDirection+0x40>
     72a:	cb 01       	movw	r24, r22
     72c:	80 95       	com	r24
     72e:	84 23       	and	r24, r20
     730:	8a bb       	out	0x1a, r24	; 26
     732:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT_PULL_UP)
     734:	42 30       	cpi	r20, 0x02	; 2
     736:	09 f0       	breq	.+2      	; 0x73a <DIO_voidSetPinDirection+0x58>
     738:	ac c0       	rjmp	.+344    	; 0x892 <__stack+0x33>
		{
			SET_BIT(PORTA_REG , Copy_u8PinNumber);
     73a:	4b b3       	in	r20, 0x1b	; 27
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	b9 01       	movw	r22, r18
     742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_voidSetPinDirection+0x66>
     744:	66 0f       	add	r22, r22
     746:	77 1f       	adc	r23, r23
     748:	8a 95       	dec	r24
     74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_voidSetPinDirection+0x62>
     74c:	cb 01       	movw	r24, r22
     74e:	94 2f       	mov	r25, r20
     750:	98 2b       	or	r25, r24
     752:	9b bb       	out	0x1b, r25	; 27
			CLR_BIT(DDRA_REG , Copy_u8PinNumber);
     754:	9a b3       	in	r25, 0x1a	; 26
     756:	80 95       	com	r24
     758:	89 23       	and	r24, r25
     75a:	8a bb       	out	0x1a, r24	; 26
     75c:	08 95       	ret
		}
		break;

		case PORTB:
		if(Copy_u8Direction == OUTPUT)
     75e:	41 30       	cpi	r20, 0x01	; 1
     760:	69 f4       	brne	.+26     	; 0x77c <DIO_voidSetPinDirection+0x9a>
		{
			SET_BIT(DDRB_REG , Copy_u8PinNumber);
     762:	47 b3       	in	r20, 0x17	; 23
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	b9 01       	movw	r22, r18
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_voidSetPinDirection+0x8e>
     76c:	66 0f       	add	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	8a 95       	dec	r24
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_voidSetPinDirection+0x8a>
     774:	cb 01       	movw	r24, r22
     776:	84 2b       	or	r24, r20
     778:	87 bb       	out	0x17, r24	; 23
     77a:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT)
     77c:	41 11       	cpse	r20, r1
     77e:	0e c0       	rjmp	.+28     	; 0x79c <DIO_voidSetPinDirection+0xba>
		{
			CLR_BIT(DDRB_REG , Copy_u8PinNumber);
     780:	47 b3       	in	r20, 0x17	; 23
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	b9 01       	movw	r22, r18
     788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_voidSetPinDirection+0xac>
     78a:	66 0f       	add	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	8a 95       	dec	r24
     790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_voidSetPinDirection+0xa8>
     792:	cb 01       	movw	r24, r22
     794:	80 95       	com	r24
     796:	84 23       	and	r24, r20
     798:	87 bb       	out	0x17, r24	; 23
     79a:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT_PULL_UP)
     79c:	42 30       	cpi	r20, 0x02	; 2
     79e:	09 f0       	breq	.+2      	; 0x7a2 <DIO_voidSetPinDirection+0xc0>
     7a0:	78 c0       	rjmp	.+240    	; 0x892 <__stack+0x33>
		{
			SET_BIT(PORTB_REG , Copy_u8PinNumber);
     7a2:	48 b3       	in	r20, 0x18	; 24
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	b9 01       	movw	r22, r18
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_voidSetPinDirection+0xce>
     7ac:	66 0f       	add	r22, r22
     7ae:	77 1f       	adc	r23, r23
     7b0:	8a 95       	dec	r24
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_voidSetPinDirection+0xca>
     7b4:	cb 01       	movw	r24, r22
     7b6:	94 2f       	mov	r25, r20
     7b8:	98 2b       	or	r25, r24
     7ba:	98 bb       	out	0x18, r25	; 24
			CLR_BIT(DDRB_REG , Copy_u8PinNumber);
     7bc:	97 b3       	in	r25, 0x17	; 23
     7be:	80 95       	com	r24
     7c0:	89 23       	and	r24, r25
     7c2:	87 bb       	out	0x17, r24	; 23
     7c4:	08 95       	ret
		}
		break;

		case PORTC:
		if(Copy_u8Direction == OUTPUT)
     7c6:	41 30       	cpi	r20, 0x01	; 1
     7c8:	69 f4       	brne	.+26     	; 0x7e4 <DIO_voidSetPinDirection+0x102>
		{
			SET_BIT(DDRC_REG , Copy_u8PinNumber);
     7ca:	44 b3       	in	r20, 0x14	; 20
     7cc:	21 e0       	ldi	r18, 0x01	; 1
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	b9 01       	movw	r22, r18
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_voidSetPinDirection+0xf6>
     7d4:	66 0f       	add	r22, r22
     7d6:	77 1f       	adc	r23, r23
     7d8:	8a 95       	dec	r24
     7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_voidSetPinDirection+0xf2>
     7dc:	cb 01       	movw	r24, r22
     7de:	84 2b       	or	r24, r20
     7e0:	84 bb       	out	0x14, r24	; 20
     7e2:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT)
     7e4:	41 11       	cpse	r20, r1
     7e6:	0e c0       	rjmp	.+28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		{
			CLR_BIT(DDRC_REG , Copy_u8PinNumber);
     7e8:	44 b3       	in	r20, 0x14	; 20
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	b9 01       	movw	r22, r18
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_voidSetPinDirection+0x114>
     7f2:	66 0f       	add	r22, r22
     7f4:	77 1f       	adc	r23, r23
     7f6:	8a 95       	dec	r24
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_voidSetPinDirection+0x110>
     7fa:	cb 01       	movw	r24, r22
     7fc:	80 95       	com	r24
     7fe:	84 23       	and	r24, r20
     800:	84 bb       	out	0x14, r24	; 20
     802:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT_PULL_UP)
     804:	42 30       	cpi	r20, 0x02	; 2
     806:	09 f0       	breq	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	44 c0       	rjmp	.+136    	; 0x892 <__stack+0x33>
		{
			SET_BIT(PORTC_REG , Copy_u8PinNumber);
     80a:	45 b3       	in	r20, 0x15	; 21
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	b9 01       	movw	r22, r18
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	66 0f       	add	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	8a 95       	dec	r24
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	cb 01       	movw	r24, r22
     81e:	94 2f       	mov	r25, r20
     820:	98 2b       	or	r25, r24
     822:	95 bb       	out	0x15, r25	; 21
			CLR_BIT(DDRC_REG , Copy_u8PinNumber);
     824:	94 b3       	in	r25, 0x14	; 20
     826:	80 95       	com	r24
     828:	89 23       	and	r24, r25
     82a:	84 bb       	out	0x14, r24	; 20
     82c:	08 95       	ret
		}
		break;

		case PORTD:
		if(Copy_u8Direction == OUTPUT)
     82e:	41 30       	cpi	r20, 0x01	; 1
     830:	69 f4       	brne	.+26     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		{
			SET_BIT(DDRD_REG , Copy_u8PinNumber);
     832:	41 b3       	in	r20, 0x11	; 17
     834:	21 e0       	ldi	r18, 0x01	; 1
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	b9 01       	movw	r22, r18
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83c:	66 0f       	add	r22, r22
     83e:	77 1f       	adc	r23, r23
     840:	8a 95       	dec	r24
     842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     844:	cb 01       	movw	r24, r22
     846:	84 2b       	or	r24, r20
     848:	81 bb       	out	0x11, r24	; 17
     84a:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT)
     84c:	41 11       	cpse	r20, r1
     84e:	0e c0       	rjmp	.+28     	; 0x86c <__stack+0xd>
		{
			CLR_BIT(DDRD_REG , Copy_u8PinNumber);
     850:	41 b3       	in	r20, 0x11	; 17
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	b9 01       	movw	r22, r18
     858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85a:	66 0f       	add	r22, r22
     85c:	77 1f       	adc	r23, r23
     85e:	8a 95       	dec	r24
     860:	e2 f7       	brpl	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     862:	cb 01       	movw	r24, r22
     864:	80 95       	com	r24
     866:	84 23       	and	r24, r20
     868:	81 bb       	out	0x11, r24	; 17
     86a:	08 95       	ret
		}
		else if (Copy_u8Direction == INPUT_PULL_UP)
     86c:	42 30       	cpi	r20, 0x02	; 2
     86e:	89 f4       	brne	.+34     	; 0x892 <__stack+0x33>
		{
			SET_BIT(PORTD_REG , Copy_u8PinNumber);
     870:	42 b3       	in	r20, 0x12	; 18
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	b9 01       	movw	r22, r18
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	66 0f       	add	r22, r22
     87c:	77 1f       	adc	r23, r23
     87e:	8a 95       	dec	r24
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	cb 01       	movw	r24, r22
     884:	94 2f       	mov	r25, r20
     886:	98 2b       	or	r25, r24
     888:	92 bb       	out	0x12, r25	; 18
			CLR_BIT(DDRD_REG , Copy_u8PinNumber);
     88a:	91 b3       	in	r25, 0x11	; 17
     88c:	80 95       	com	r24
     88e:	89 23       	and	r24, r25
     890:	81 bb       	out	0x11, r24	; 17
     892:	08 95       	ret

00000894 <DIO_voidSetPortDirection>:
	}
}

void DIO_voidSetPortDirection (DIO_PORT_t DIO_port, u8 Copy_u8PortDirection)
{
	switch (DIO_port)
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	a9 f0       	breq	.+42     	; 0x8c2 <DIO_voidSetPortDirection+0x2e>
     898:	28 f0       	brcs	.+10     	; 0x8a4 <DIO_voidSetPortDirection+0x10>
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	09 f1       	breq	.+66     	; 0x8e0 <DIO_voidSetPortDirection+0x4c>
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	71 f1       	breq	.+92     	; 0x8fe <DIO_voidSetPortDirection+0x6a>
     8a2:	08 95       	ret
	{
		case PORTA:

		if(Copy_u8PortDirection == OUTPUT)
     8a4:	61 30       	cpi	r22, 0x01	; 1
     8a6:	19 f4       	brne	.+6      	; 0x8ae <DIO_voidSetPortDirection+0x1a>
		{
			DDRA_REG=0xFF;
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	8a bb       	out	0x1a, r24	; 26
     8ac:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT)
     8ae:	61 11       	cpse	r22, r1
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <DIO_voidSetPortDirection+0x22>
		{
			DDRA_REG=0x00;
     8b2:	1a ba       	out	0x1a, r1	; 26
     8b4:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
     8b6:	62 30       	cpi	r22, 0x02	; 2
     8b8:	81 f5       	brne	.+96     	; 0x91a <DIO_voidSetPortDirection+0x86>
		{
			PORTA_REG=0xFF;
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	8b bb       	out	0x1b, r24	; 27
			DDRA_REG=0x00;
     8be:	1a ba       	out	0x1a, r1	; 26
     8c0:	08 95       	ret
		}
		break;

		case PORTB:

		if(Copy_u8PortDirection == OUTPUT)
     8c2:	61 30       	cpi	r22, 0x01	; 1
     8c4:	19 f4       	brne	.+6      	; 0x8cc <DIO_voidSetPortDirection+0x38>
		{
			DDRB_REG=0xFF;
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	87 bb       	out	0x17, r24	; 23
     8ca:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT)
     8cc:	61 11       	cpse	r22, r1
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <DIO_voidSetPortDirection+0x40>
		{
			DDRB_REG=0x00;
     8d0:	17 ba       	out	0x17, r1	; 23
     8d2:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
     8d4:	62 30       	cpi	r22, 0x02	; 2
     8d6:	09 f5       	brne	.+66     	; 0x91a <DIO_voidSetPortDirection+0x86>
		{
			PORTB_REG=0xFF;
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	88 bb       	out	0x18, r24	; 24
			DDRB_REG=0x00;
     8dc:	17 ba       	out	0x17, r1	; 23
     8de:	08 95       	ret
		}
		break;

		case PORTC:

		if(Copy_u8PortDirection == OUTPUT)
     8e0:	61 30       	cpi	r22, 0x01	; 1
     8e2:	19 f4       	brne	.+6      	; 0x8ea <DIO_voidSetPortDirection+0x56>
		{
			DDRC_REG=0xFF;
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	84 bb       	out	0x14, r24	; 20
     8e8:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT)
     8ea:	61 11       	cpse	r22, r1
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <DIO_voidSetPortDirection+0x5e>
		{
			DDRC_REG=0x00;
     8ee:	14 ba       	out	0x14, r1	; 20
     8f0:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
     8f2:	62 30       	cpi	r22, 0x02	; 2
     8f4:	91 f4       	brne	.+36     	; 0x91a <DIO_voidSetPortDirection+0x86>
		{
			PORTC_REG=0xFF;
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	85 bb       	out	0x15, r24	; 21
			DDRC_REG=0x00;
     8fa:	14 ba       	out	0x14, r1	; 20
     8fc:	08 95       	ret
		}
		break;

		case PORTD:

		if(Copy_u8PortDirection == OUTPUT)
     8fe:	61 30       	cpi	r22, 0x01	; 1
     900:	19 f4       	brne	.+6      	; 0x908 <DIO_voidSetPortDirection+0x74>
		{
			DDRD_REG=0xFF;
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	81 bb       	out	0x11, r24	; 17
     906:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT)
     908:	61 11       	cpse	r22, r1
     90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_voidSetPortDirection+0x7c>
		{
			DDRD_REG=0x00;
     90c:	11 ba       	out	0x11, r1	; 17
     90e:	08 95       	ret
		}
		else if (Copy_u8PortDirection == INPUT_PULL_UP)
     910:	62 30       	cpi	r22, 0x02	; 2
     912:	19 f4       	brne	.+6      	; 0x91a <DIO_voidSetPortDirection+0x86>
		{
			PORTD_REG=0xFF;
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	82 bb       	out	0x12, r24	; 18
			DDRD_REG=0x00;
     918:	11 ba       	out	0x11, r1	; 17
     91a:	08 95       	ret

0000091c <DIO_voidSetPinValue>:

}

void DIO_voidSetPinValue (u8 Copy_u8PinNumber, DIO_PORT_t DIO_port, u8 Copy_u8Value)
{
	switch (DIO_port)
     91c:	61 30       	cpi	r22, 0x01	; 1
     91e:	39 f1       	breq	.+78     	; 0x96e <DIO_voidSetPinValue+0x52>
     920:	38 f0       	brcs	.+14     	; 0x930 <DIO_voidSetPinValue+0x14>
     922:	62 30       	cpi	r22, 0x02	; 2
     924:	09 f4       	brne	.+2      	; 0x928 <DIO_voidSetPinValue+0xc>
     926:	42 c0       	rjmp	.+132    	; 0x9ac <DIO_voidSetPinValue+0x90>
     928:	63 30       	cpi	r22, 0x03	; 3
     92a:	09 f4       	brne	.+2      	; 0x92e <DIO_voidSetPinValue+0x12>
     92c:	5e c0       	rjmp	.+188    	; 0x9ea <DIO_voidSetPinValue+0xce>
     92e:	08 95       	ret
	{
		case PORTA:
			if( Copy_u8Value == HIGH)
     930:	41 30       	cpi	r20, 0x01	; 1
     932:	69 f4       	brne	.+26     	; 0x94e <DIO_voidSetPinValue+0x32>
			{
				SET_BIT(PORTA_REG , Copy_u8PinNumber);
     934:	4b b3       	in	r20, 0x1b	; 27
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	b9 01       	movw	r22, r18
     93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_voidSetPinValue+0x26>
     93e:	66 0f       	add	r22, r22
     940:	77 1f       	adc	r23, r23
     942:	8a 95       	dec	r24
     944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_voidSetPinValue+0x22>
     946:	cb 01       	movw	r24, r22
     948:	84 2b       	or	r24, r20
     94a:	8b bb       	out	0x1b, r24	; 27
     94c:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
     94e:	41 11       	cpse	r20, r1
     950:	6a c0       	rjmp	.+212    	; 0xa26 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTA_REG , Copy_u8PinNumber);
     952:	4b b3       	in	r20, 0x1b	; 27
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	b9 01       	movw	r22, r18
     95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_voidSetPinValue+0x44>
     95c:	66 0f       	add	r22, r22
     95e:	77 1f       	adc	r23, r23
     960:	8a 95       	dec	r24
     962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_voidSetPinValue+0x40>
     964:	cb 01       	movw	r24, r22
     966:	80 95       	com	r24
     968:	84 23       	and	r24, r20
     96a:	8b bb       	out	0x1b, r24	; 27
     96c:	08 95       	ret
			}
			break;

		case PORTB:
			if(Copy_u8Value == HIGH)
     96e:	41 30       	cpi	r20, 0x01	; 1
     970:	69 f4       	brne	.+26     	; 0x98c <DIO_voidSetPinValue+0x70>
			{
				SET_BIT(PORTB_REG , Copy_u8PinNumber);
     972:	48 b3       	in	r20, 0x18	; 24
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	b9 01       	movw	r22, r18
     97a:	02 c0       	rjmp	.+4      	; 0x980 <DIO_voidSetPinValue+0x64>
     97c:	66 0f       	add	r22, r22
     97e:	77 1f       	adc	r23, r23
     980:	8a 95       	dec	r24
     982:	e2 f7       	brpl	.-8      	; 0x97c <DIO_voidSetPinValue+0x60>
     984:	cb 01       	movw	r24, r22
     986:	84 2b       	or	r24, r20
     988:	88 bb       	out	0x18, r24	; 24
     98a:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
     98c:	41 11       	cpse	r20, r1
     98e:	4b c0       	rjmp	.+150    	; 0xa26 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTB_REG , Copy_u8PinNumber);
     990:	48 b3       	in	r20, 0x18	; 24
     992:	21 e0       	ldi	r18, 0x01	; 1
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	b9 01       	movw	r22, r18
     998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_voidSetPinValue+0x82>
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	8a 95       	dec	r24
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_voidSetPinValue+0x7e>
     9a2:	cb 01       	movw	r24, r22
     9a4:	80 95       	com	r24
     9a6:	84 23       	and	r24, r20
     9a8:	88 bb       	out	0x18, r24	; 24
     9aa:	08 95       	ret
			}
			break;

		case PORTC:

			if( Copy_u8Value == HIGH)
     9ac:	41 30       	cpi	r20, 0x01	; 1
     9ae:	69 f4       	brne	.+26     	; 0x9ca <DIO_voidSetPinValue+0xae>
			{
				SET_BIT(PORTC_REG , Copy_u8PinNumber);
     9b0:	45 b3       	in	r20, 0x15	; 21
     9b2:	21 e0       	ldi	r18, 0x01	; 1
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	b9 01       	movw	r22, r18
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <DIO_voidSetPinValue+0xa2>
     9ba:	66 0f       	add	r22, r22
     9bc:	77 1f       	adc	r23, r23
     9be:	8a 95       	dec	r24
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <DIO_voidSetPinValue+0x9e>
     9c2:	cb 01       	movw	r24, r22
     9c4:	84 2b       	or	r24, r20
     9c6:	85 bb       	out	0x15, r24	; 21
     9c8:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
     9ca:	41 11       	cpse	r20, r1
     9cc:	2c c0       	rjmp	.+88     	; 0xa26 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTC_REG , Copy_u8PinNumber);
     9ce:	45 b3       	in	r20, 0x15	; 21
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	b9 01       	movw	r22, r18
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_voidSetPinValue+0xc0>
     9d8:	66 0f       	add	r22, r22
     9da:	77 1f       	adc	r23, r23
     9dc:	8a 95       	dec	r24
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_voidSetPinValue+0xbc>
     9e0:	cb 01       	movw	r24, r22
     9e2:	80 95       	com	r24
     9e4:	84 23       	and	r24, r20
     9e6:	85 bb       	out	0x15, r24	; 21
     9e8:	08 95       	ret
			}
			break;

		case PORTD:

			if( Copy_u8Value == HIGH)
     9ea:	41 30       	cpi	r20, 0x01	; 1
     9ec:	69 f4       	brne	.+26     	; 0xa08 <DIO_voidSetPinValue+0xec>
			{
				SET_BIT(PORTD_REG , Copy_u8PinNumber);
     9ee:	42 b3       	in	r20, 0x12	; 18
     9f0:	21 e0       	ldi	r18, 0x01	; 1
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	b9 01       	movw	r22, r18
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_voidSetPinValue+0xe0>
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	8a 95       	dec	r24
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_voidSetPinValue+0xdc>
     a00:	cb 01       	movw	r24, r22
     a02:	84 2b       	or	r24, r20
     a04:	82 bb       	out	0x12, r24	; 18
     a06:	08 95       	ret
			}
			else if ( Copy_u8Value ==LOW)
     a08:	41 11       	cpse	r20, r1
     a0a:	0d c0       	rjmp	.+26     	; 0xa26 <DIO_voidSetPinValue+0x10a>
			{
				CLR_BIT(PORTD_REG , Copy_u8PinNumber);
     a0c:	42 b3       	in	r20, 0x12	; 18
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	b9 01       	movw	r22, r18
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_voidSetPinValue+0xfe>
     a16:	66 0f       	add	r22, r22
     a18:	77 1f       	adc	r23, r23
     a1a:	8a 95       	dec	r24
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_voidSetPinValue+0xfa>
     a1e:	cb 01       	movw	r24, r22
     a20:	80 95       	com	r24
     a22:	84 23       	and	r24, r20
     a24:	82 bb       	out	0x12, r24	; 18
     a26:	08 95       	ret

00000a28 <DIO_voidSetPortValue>:
	}
}

void DIO_voidSetPortValue (DIO_PORT_t DIO_port, u8 Copy_u8Value)
{
	switch(DIO_port)
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	41 f0       	breq	.+16     	; 0xa3c <DIO_voidSetPortValue+0x14>
     a2c:	28 f0       	brcs	.+10     	; 0xa38 <DIO_voidSetPortValue+0x10>
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	39 f0       	breq	.+14     	; 0xa40 <DIO_voidSetPortValue+0x18>
     a32:	83 30       	cpi	r24, 0x03	; 3
     a34:	39 f0       	breq	.+14     	; 0xa44 <DIO_voidSetPortValue+0x1c>
     a36:	08 95       	ret
	{
		case PORTA:
		PORTA_REG=Copy_u8Value;
     a38:	6b bb       	out	0x1b, r22	; 27
		break;
     a3a:	08 95       	ret

		case PORTB:
		PORTB_REG=Copy_u8Value;
     a3c:	68 bb       	out	0x18, r22	; 24
		break;
     a3e:	08 95       	ret

		case PORTC:
		PORTC_REG=Copy_u8Value;
     a40:	65 bb       	out	0x15, r22	; 21
		break;
     a42:	08 95       	ret

		case PORTD:
		PORTD_REG=Copy_u8Value;
     a44:	62 bb       	out	0x12, r22	; 18
     a46:	08 95       	ret

00000a48 <DIO_u8GetPinValue>:
	}
}

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber, DIO_PORT_t DIO_port)
{
	switch (DIO_port)
     a48:	61 30       	cpi	r22, 0x01	; 1
     a4a:	89 f0       	breq	.+34     	; 0xa6e <DIO_u8GetPinValue+0x26>
     a4c:	28 f0       	brcs	.+10     	; 0xa58 <DIO_u8GetPinValue+0x10>
     a4e:	62 30       	cpi	r22, 0x02	; 2
     a50:	c9 f0       	breq	.+50     	; 0xa84 <DIO_u8GetPinValue+0x3c>
     a52:	63 30       	cpi	r22, 0x03	; 3
     a54:	11 f1       	breq	.+68     	; 0xa9a <DIO_u8GetPinValue+0x52>
     a56:	2c c0       	rjmp	.+88     	; 0xab0 <DIO_u8GetPinValue+0x68>
	{
		case PORTA:
		return GET_BIT(PINA_REG , Copy_u8PinNumber);
     a58:	29 b3       	in	r18, 0x19	; 25
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	a9 01       	movw	r20, r18
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_u8GetPinValue+0x1c>
     a60:	55 95       	asr	r21
     a62:	47 95       	ror	r20
     a64:	8a 95       	dec	r24
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_u8GetPinValue+0x18>
     a68:	ca 01       	movw	r24, r20
     a6a:	81 70       	andi	r24, 0x01	; 1
     a6c:	08 95       	ret

		case PORTB:
		return GET_BIT(PINB_REG , Copy_u8PinNumber);
     a6e:	26 b3       	in	r18, 0x16	; 22
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	a9 01       	movw	r20, r18
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_u8GetPinValue+0x32>
     a76:	55 95       	asr	r21
     a78:	47 95       	ror	r20
     a7a:	8a 95       	dec	r24
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_u8GetPinValue+0x2e>
     a7e:	ca 01       	movw	r24, r20
     a80:	81 70       	andi	r24, 0x01	; 1
     a82:	08 95       	ret

		case PORTC:
		return GET_BIT(PINC_REG , Copy_u8PinNumber);
     a84:	23 b3       	in	r18, 0x13	; 19
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	a9 01       	movw	r20, r18
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_u8GetPinValue+0x48>
     a8c:	55 95       	asr	r21
     a8e:	47 95       	ror	r20
     a90:	8a 95       	dec	r24
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_u8GetPinValue+0x44>
     a94:	ca 01       	movw	r24, r20
     a96:	81 70       	andi	r24, 0x01	; 1
     a98:	08 95       	ret

		case PORTD:
		return GET_BIT(PIND_REG , Copy_u8PinNumber);
     a9a:	20 b3       	in	r18, 0x10	; 16
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	a9 01       	movw	r20, r18
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <DIO_u8GetPinValue+0x5e>
     aa2:	55 95       	asr	r21
     aa4:	47 95       	ror	r20
     aa6:	8a 95       	dec	r24
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <DIO_u8GetPinValue+0x5a>
     aaa:	ca 01       	movw	r24, r20
     aac:	81 70       	andi	r24, 0x01	; 1
     aae:	08 95       	ret

	}
	return 0;  //34an el warning :D
     ab0:	80 e0       	ldi	r24, 0x00	; 0
}
     ab2:	08 95       	ret

00000ab4 <__vector_1>:
	if(interruptPin > INT2)
	return;
	EXTI_voidCallBacks[interruptPin] = CallBack;
}

void EXTI_VECTOR_ISR_EXTI0(void){
     ab4:	1f 92       	push	r1
     ab6:	0f 92       	push	r0
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
     abe:	2f 93       	push	r18
     ac0:	3f 93       	push	r19
     ac2:	4f 93       	push	r20
     ac4:	5f 93       	push	r21
     ac6:	6f 93       	push	r22
     ac8:	7f 93       	push	r23
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	af 93       	push	r26
     ad0:	bf 93       	push	r27
     ad2:	ef 93       	push	r30
     ad4:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[0] != 0){
     ad6:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <EXTI_voidCallBacks>
     ada:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <EXTI_voidCallBacks+0x1>
     ade:	30 97       	sbiw	r30, 0x00	; 0
     ae0:	09 f0       	breq	.+2      	; 0xae4 <__vector_1+0x30>
		EXTI_voidCallBacks[0]();
     ae2:	09 95       	icall
	}
}
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_2>:

void EXTI_VECTOR_ISR_EXTI1(void){
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	2f 93       	push	r18
     b12:	3f 93       	push	r19
     b14:	4f 93       	push	r20
     b16:	5f 93       	push	r21
     b18:	6f 93       	push	r22
     b1a:	7f 93       	push	r23
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
     b20:	af 93       	push	r26
     b22:	bf 93       	push	r27
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
	
	if(EXTI_voidCallBacks[1] != 0){
     b28:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <EXTI_voidCallBacks+0x2>
     b2c:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <EXTI_voidCallBacks+0x3>
     b30:	30 97       	sbiw	r30, 0x00	; 0
     b32:	09 f0       	breq	.+2      	; 0xb36 <__vector_2+0x30>
		EXTI_voidCallBacks[1]();
     b34:	09 95       	icall
	}
}
     b36:	ff 91       	pop	r31
     b38:	ef 91       	pop	r30
     b3a:	bf 91       	pop	r27
     b3c:	af 91       	pop	r26
     b3e:	9f 91       	pop	r25
     b40:	8f 91       	pop	r24
     b42:	7f 91       	pop	r23
     b44:	6f 91       	pop	r22
     b46:	5f 91       	pop	r21
     b48:	4f 91       	pop	r20
     b4a:	3f 91       	pop	r19
     b4c:	2f 91       	pop	r18
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <__vector_3>:

void EXTI_VECTOR_ISR_EXTI2(void){
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	2f 93       	push	r18
     b64:	3f 93       	push	r19
     b66:	4f 93       	push	r20
     b68:	5f 93       	push	r21
     b6a:	6f 93       	push	r22
     b6c:	7f 93       	push	r23
     b6e:	8f 93       	push	r24
     b70:	9f 93       	push	r25
     b72:	af 93       	push	r26
     b74:	bf 93       	push	r27
     b76:	ef 93       	push	r30
     b78:	ff 93       	push	r31
	if(EXTI_voidCallBacks[2] != 0){
     b7a:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <EXTI_voidCallBacks+0x4>
     b7e:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <EXTI_voidCallBacks+0x5>
     b82:	30 97       	sbiw	r30, 0x00	; 0
     b84:	09 f0       	breq	.+2      	; 0xb88 <__vector_3+0x30>
		EXTI_voidCallBacks[2]();
     b86:	09 95       	icall
	}
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <TIMER0_voidInit>:
}
void TIMER0_voidSetCallBack(enum TIMER0_Interrupt interrupt, void(*callBack)(void))
{
	if (interrupt > 1)
		return;
	TIMER0_callBacks[interrupt] = callBack;
     baa:	1c be       	out	0x3c, r1	; 60
     bac:	22 bf       	out	0x32, r18	; 50
     bae:	99 b7       	in	r25, 0x39	; 57
     bb0:	9f 7b       	andi	r25, 0xBF	; 191
     bb2:	99 bf       	out	0x39, r25	; 57
     bb4:	99 b7       	in	r25, 0x39	; 57
     bb6:	9f 77       	andi	r25, 0x7F	; 127
     bb8:	99 bf       	out	0x39, r25	; 57
     bba:	a8 2f       	mov	r26, r24
     bbc:	a1 70       	andi	r26, 0x01	; 1
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	00 24       	eor	r0, r0
     bc2:	b6 95       	lsr	r27
     bc4:	a7 95       	ror	r26
     bc6:	07 94       	ror	r0
     bc8:	b6 95       	lsr	r27
     bca:	a7 95       	ror	r26
     bcc:	07 94       	ror	r0
     bce:	ba 2f       	mov	r27, r26
     bd0:	a0 2d       	mov	r26, r0
     bd2:	81 fb       	bst	r24, 1
     bd4:	ee 27       	eor	r30, r30
     bd6:	e0 f9       	bld	r30, 0
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	80 e1       	ldi	r24, 0x10	; 16
     be8:	68 9f       	mul	r22, r24
     bea:	b0 01       	movw	r22, r0
     bec:	11 24       	eor	r1, r1
     bee:	ea 2b       	or	r30, r26
     bf0:	6e 2b       	or	r22, r30
     bf2:	64 2b       	or	r22, r20
     bf4:	63 bf       	out	0x33, r22	; 51
     bf6:	40 93 a2 00 	sts	0x00A2, r20	; 0x8000a2 <storedPrescalar>
     bfa:	20 93 a1 00 	sts	0x00A1, r18	; 0x8000a1 <storedPreload>
     bfe:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <isSoftwarePWMMode>
     c02:	08 95       	ret

00000c04 <TIMER0_voidEnableInterrupt>:
     c04:	99 b7       	in	r25, 0x39	; 57
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <TIMER0_voidEnableInterrupt+0xc>
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	8a 95       	dec	r24
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <TIMER0_voidEnableInterrupt+0x8>
     c14:	29 2b       	or	r18, r25
     c16:	29 bf       	out	0x39, r18	; 57
     c18:	8f b7       	in	r24, 0x3f	; 63
     c1a:	80 68       	ori	r24, 0x80	; 128
     c1c:	8f bf       	out	0x3f, r24	; 63
     c1e:	08 95       	ret

00000c20 <TIMER0_voidSoftwarePWM>:
};
void TIMER0_voidSoftwarePWM(u8 port , u8 pin , u8 dutyCycle)
{
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	d8 2f       	mov	r29, r24
     c28:	c6 2f       	mov	r28, r22
     c2a:	14 2f       	mov	r17, r20
	DIO_voidSetPinDirection(pin , port , OUTPUT);
     c2c:	41 e0       	ldi	r20, 0x01	; 1
     c2e:	68 2f       	mov	r22, r24
     c30:	8c 2f       	mov	r24, r28
     c32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_voidSetPinDirection>
	SoftwarePWM_PORT = port;
     c36:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <SoftwarePWM_PORT>
	SoftwarePWM_PIN = pin;
     c3a:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <SoftwarePWM_PIN>
	SoftwarePWM_dutyCycle = dutyCycle;
     c3e:	10 93 98 00 	sts	0x0098, r17	; 0x800098 <SoftwarePWM_dutyCycle>
	OCR0_REG = 100;
     c42:	84 e6       	ldi	r24, 0x64	; 100
     c44:	8c bf       	out	0x3c, r24	; 60
	isSoftwarePWMMode = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <isSoftwarePWMMode>
	TIMER0_voidEnableInterrupt(TIMER0_INTERRUPT_COMPARE);
     c4c:	0e 94 02 06 	call	0xc04	; 0xc04 <TIMER0_voidEnableInterrupt>
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	08 95       	ret

00000c58 <__vector_11>:
void TIMER0_ISR_VECTOR_OVERFLOW(void){
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
	if(TIMER0_callBacks[0] != 0){
     c7a:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <TIMER0_callBacks>
     c7e:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <TIMER0_callBacks+0x1>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	09 f0       	breq	.+2      	; 0xc88 <__vector_11+0x30>
		TIMER0_callBacks[0]();
     c86:	09 95       	icall
	}
	SET_BIT(TIFR_REG,0);
     c88:	88 b7       	in	r24, 0x38	; 56
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	88 bf       	out	0x38, r24	; 56
	TCNT0_REG = storedPreload;
     c8e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <storedPreload>
     c92:	82 bf       	out	0x32, r24	; 50
}
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <__vector_10>:

void TIMER0_ISR_VECTOR_COMPARE(void){
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	2f 93       	push	r18
     cc2:	3f 93       	push	r19
     cc4:	4f 93       	push	r20
     cc6:	5f 93       	push	r21
     cc8:	6f 93       	push	r22
     cca:	7f 93       	push	r23
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	af 93       	push	r26
     cd2:	bf 93       	push	r27
     cd4:	ef 93       	push	r30
     cd6:	ff 93       	push	r31
	if (isSoftwarePWMMode)
     cd8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <isSoftwarePWMMode>
     cdc:	88 23       	and	r24, r24
     cde:	f1 f0       	breq	.+60     	; 0xd1c <__vector_10+0x66>
	{
		SoftwarePWM_counter++;
     ce0:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <SoftwarePWM_counter>
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <SoftwarePWM_counter>
		if (SoftwarePWM_counter >= SoftwarePWM_dutyCycle )
     cea:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <SoftwarePWM_dutyCycle>
     cee:	89 17       	cp	r24, r25
     cf0:	38 f0       	brcs	.+14     	; 0xd00 <__vector_10+0x4a>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , LOW);
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <SoftwarePWM_PORT>
     cf8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <SoftwarePWM_PIN>
     cfc:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
		}
		if (SoftwarePWM_counter >= 100)
     d00:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <SoftwarePWM_counter>
     d04:	84 36       	cpi	r24, 0x64	; 100
     d06:	88 f0       	brcs	.+34     	; 0xd2a <__vector_10+0x74>
		{
			DIO_voidSetPinValue(SoftwarePWM_PIN , SoftwarePWM_PORT , HIGH);
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <SoftwarePWM_PORT>
     d0e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <SoftwarePWM_PIN>
     d12:	0e 94 8e 04 	call	0x91c	; 0x91c <DIO_voidSetPinValue>
			SoftwarePWM_counter = 0;
     d16:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <SoftwarePWM_counter>
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <__vector_10+0x74>
		}
	}
	else 
	{
		if(TIMER0_callBacks[1] != 0){
     d1c:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <TIMER0_callBacks+0x2>
     d20:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <TIMER0_callBacks+0x3>
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	09 f0       	breq	.+2      	; 0xd2a <__vector_10+0x74>
			TIMER0_callBacks[1]();
     d28:	09 95       	icall
		}
	}
	SET_BIT(TIFR_REG,1);
     d2a:	88 b7       	in	r24, 0x38	; 56
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	88 bf       	out	0x38, r24	; 56
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <__vector_7>:

void MTIM1_voidStartTickMeasure(void);
u32  MTIM1_u32GetElapsedTicks(void);
u16 MTIM1_u16GetDivision(void);

void TIMER1_ISR_VECTOR_COMPAREA(void){
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
	if(TIMER1_callBacks[2] != 0)
     d74:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <TIMER1_callBacks+0x4>
     d78:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <TIMER1_callBacks+0x5>
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_7+0x30>
	TIMER1_callBacks[2]();
     d80:	09 95       	icall
}
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <__vector_8>:
void TIMER1_ISR_VECTOR_COMPAREB(void){
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
	if(TIMER1_callBacks[1] != 0)
     dc6:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <TIMER1_callBacks+0x2>
     dca:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <TIMER1_callBacks+0x3>
     dce:	30 97       	sbiw	r30, 0x00	; 0
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <__vector_8+0x30>
	TIMER1_callBacks[1]();
     dd2:	09 95       	icall
}
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_9>:
void TIMER1_ISR_VECTOR_OVERFLOW(void){
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31
	overflowCounter++;
     e18:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <overflowCounter>
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <overflowCounter>
	if(TIMER1_callBacks[0] != 0)
     e22:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <TIMER1_callBacks>
     e26:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <TIMER1_callBacks+0x1>
     e2a:	30 97       	sbiw	r30, 0x00	; 0
     e2c:	09 f0       	breq	.+2      	; 0xe30 <__vector_9+0x3a>
		TIMER1_callBacks[0]();
     e2e:	09 95       	icall
	TCNT1_REG = TIMER1_storedPreload;
     e30:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <TIMER1_storedPreload>
     e34:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <TIMER1_storedPreload+0x1>
     e38:	9d bd       	out	0x2d, r25	; 45
     e3a:	8c bd       	out	0x2c, r24	; 44
}
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	bf 91       	pop	r27
     e42:	af 91       	pop	r26
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	7f 91       	pop	r23
     e4a:	6f 91       	pop	r22
     e4c:	5f 91       	pop	r21
     e4e:	4f 91       	pop	r20
     e50:	3f 91       	pop	r19
     e52:	2f 91       	pop	r18
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <__fixunssfsi>:
     e5e:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_splitA>
     e62:	88 f0       	brcs	.+34     	; 0xe86 <__fixunssfsi+0x28>
     e64:	9f 57       	subi	r25, 0x7F	; 127
     e66:	98 f0       	brcs	.+38     	; 0xe8e <__fixunssfsi+0x30>
     e68:	b9 2f       	mov	r27, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	b7 51       	subi	r27, 0x17	; 23
     e6e:	b0 f0       	brcs	.+44     	; 0xe9c <__fixunssfsi+0x3e>
     e70:	e1 f0       	breq	.+56     	; 0xeaa <__fixunssfsi+0x4c>
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	1a f0       	brmi	.+6      	; 0xe82 <__fixunssfsi+0x24>
     e7c:	ba 95       	dec	r27
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__fixunssfsi+0x14>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <__fixunssfsi+0x4c>
     e82:	b1 30       	cpi	r27, 0x01	; 1
     e84:	91 f0       	breq	.+36     	; 0xeaa <__fixunssfsi+0x4c>
     e86:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_zero>
     e8a:	b1 e0       	ldi	r27, 0x01	; 1
     e8c:	08 95       	ret
     e8e:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_zero>
     e92:	67 2f       	mov	r22, r23
     e94:	78 2f       	mov	r23, r24
     e96:	88 27       	eor	r24, r24
     e98:	b8 5f       	subi	r27, 0xF8	; 248
     e9a:	39 f0       	breq	.+14     	; 0xeaa <__fixunssfsi+0x4c>
     e9c:	b9 3f       	cpi	r27, 0xF9	; 249
     e9e:	cc f3       	brlt	.-14     	; 0xe92 <__fixunssfsi+0x34>
     ea0:	86 95       	lsr	r24
     ea2:	77 95       	ror	r23
     ea4:	67 95       	ror	r22
     ea6:	b3 95       	inc	r27
     ea8:	d9 f7       	brne	.-10     	; 0xea0 <__fixunssfsi+0x42>
     eaa:	3e f4       	brtc	.+14     	; 0xeba <__fixunssfsi+0x5c>
     eac:	90 95       	com	r25
     eae:	80 95       	com	r24
     eb0:	70 95       	com	r23
     eb2:	61 95       	neg	r22
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	08 95       	ret

00000ebc <__floatunsisf>:
     ebc:	e8 94       	clt
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <__floatsisf+0x12>

00000ec0 <__floatsisf>:
     ec0:	97 fb       	bst	r25, 7
     ec2:	3e f4       	brtc	.+14     	; 0xed2 <__floatsisf+0x12>
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	99 23       	and	r25, r25
     ed4:	a9 f0       	breq	.+42     	; 0xf00 <__floatsisf+0x40>
     ed6:	f9 2f       	mov	r31, r25
     ed8:	96 e9       	ldi	r25, 0x96	; 150
     eda:	bb 27       	eor	r27, r27
     edc:	93 95       	inc	r25
     ede:	f6 95       	lsr	r31
     ee0:	87 95       	ror	r24
     ee2:	77 95       	ror	r23
     ee4:	67 95       	ror	r22
     ee6:	b7 95       	ror	r27
     ee8:	f1 11       	cpse	r31, r1
     eea:	f8 cf       	rjmp	.-16     	; 0xedc <__floatsisf+0x1c>
     eec:	fa f4       	brpl	.+62     	; 0xf2c <__floatsisf+0x6c>
     eee:	bb 0f       	add	r27, r27
     ef0:	11 f4       	brne	.+4      	; 0xef6 <__floatsisf+0x36>
     ef2:	60 ff       	sbrs	r22, 0
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__floatsisf+0x6c>
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	16 c0       	rjmp	.+44     	; 0xf2c <__floatsisf+0x6c>
     f00:	88 23       	and	r24, r24
     f02:	11 f0       	breq	.+4      	; 0xf08 <__floatsisf+0x48>
     f04:	96 e9       	ldi	r25, 0x96	; 150
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <__floatsisf+0x6a>
     f08:	77 23       	and	r23, r23
     f0a:	21 f0       	breq	.+8      	; 0xf14 <__floatsisf+0x54>
     f0c:	9e e8       	ldi	r25, 0x8E	; 142
     f0e:	87 2f       	mov	r24, r23
     f10:	76 2f       	mov	r23, r22
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__floatsisf+0x5e>
     f14:	66 23       	and	r22, r22
     f16:	71 f0       	breq	.+28     	; 0xf34 <__floatsisf+0x74>
     f18:	96 e8       	ldi	r25, 0x86	; 134
     f1a:	86 2f       	mov	r24, r22
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	2a f0       	brmi	.+10     	; 0xf2c <__floatsisf+0x6c>
     f22:	9a 95       	dec	r25
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	da f7       	brpl	.-10     	; 0xf22 <__floatsisf+0x62>
     f2c:	88 0f       	add	r24, r24
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	97 f9       	bld	r25, 7
     f34:	08 95       	ret

00000f36 <__fp_inf>:
     f36:	97 f9       	bld	r25, 7
     f38:	9f 67       	ori	r25, 0x7F	; 127
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	08 95       	ret

00000f42 <__fp_nan>:
     f42:	9f ef       	ldi	r25, 0xFF	; 255
     f44:	80 ec       	ldi	r24, 0xC0	; 192
     f46:	08 95       	ret

00000f48 <__fp_pscA>:
     f48:	00 24       	eor	r0, r0
     f4a:	0a 94       	dec	r0
     f4c:	16 16       	cp	r1, r22
     f4e:	17 06       	cpc	r1, r23
     f50:	18 06       	cpc	r1, r24
     f52:	09 06       	cpc	r0, r25
     f54:	08 95       	ret

00000f56 <__fp_pscB>:
     f56:	00 24       	eor	r0, r0
     f58:	0a 94       	dec	r0
     f5a:	12 16       	cp	r1, r18
     f5c:	13 06       	cpc	r1, r19
     f5e:	14 06       	cpc	r1, r20
     f60:	05 06       	cpc	r0, r21
     f62:	08 95       	ret

00000f64 <__fp_round>:
     f64:	09 2e       	mov	r0, r25
     f66:	03 94       	inc	r0
     f68:	00 0c       	add	r0, r0
     f6a:	11 f4       	brne	.+4      	; 0xf70 <__fp_round+0xc>
     f6c:	88 23       	and	r24, r24
     f6e:	52 f0       	brmi	.+20     	; 0xf84 <__fp_round+0x20>
     f70:	bb 0f       	add	r27, r27
     f72:	40 f4       	brcc	.+16     	; 0xf84 <__fp_round+0x20>
     f74:	bf 2b       	or	r27, r31
     f76:	11 f4       	brne	.+4      	; 0xf7c <__fp_round+0x18>
     f78:	60 ff       	sbrs	r22, 0
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <__fp_round+0x20>
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	08 95       	ret

00000f86 <__fp_split3>:
     f86:	57 fd       	sbrc	r21, 7
     f88:	90 58       	subi	r25, 0x80	; 128
     f8a:	44 0f       	add	r20, r20
     f8c:	55 1f       	adc	r21, r21
     f8e:	59 f0       	breq	.+22     	; 0xfa6 <__fp_splitA+0x10>
     f90:	5f 3f       	cpi	r21, 0xFF	; 255
     f92:	71 f0       	breq	.+28     	; 0xfb0 <__fp_splitA+0x1a>
     f94:	47 95       	ror	r20

00000f96 <__fp_splitA>:
     f96:	88 0f       	add	r24, r24
     f98:	97 fb       	bst	r25, 7
     f9a:	99 1f       	adc	r25, r25
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <__fp_splitA+0x20>
     f9e:	9f 3f       	cpi	r25, 0xFF	; 255
     fa0:	79 f0       	breq	.+30     	; 0xfc0 <__fp_splitA+0x2a>
     fa2:	87 95       	ror	r24
     fa4:	08 95       	ret
     fa6:	12 16       	cp	r1, r18
     fa8:	13 06       	cpc	r1, r19
     faa:	14 06       	cpc	r1, r20
     fac:	55 1f       	adc	r21, r21
     fae:	f2 cf       	rjmp	.-28     	; 0xf94 <__fp_split3+0xe>
     fb0:	46 95       	lsr	r20
     fb2:	f1 df       	rcall	.-30     	; 0xf96 <__fp_splitA>
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <__fp_splitA+0x30>
     fb6:	16 16       	cp	r1, r22
     fb8:	17 06       	cpc	r1, r23
     fba:	18 06       	cpc	r1, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	f1 cf       	rjmp	.-30     	; 0xfa2 <__fp_splitA+0xc>
     fc0:	86 95       	lsr	r24
     fc2:	71 05       	cpc	r23, r1
     fc4:	61 05       	cpc	r22, r1
     fc6:	08 94       	sec
     fc8:	08 95       	ret

00000fca <__fp_zero>:
     fca:	e8 94       	clt

00000fcc <__fp_szero>:
     fcc:	bb 27       	eor	r27, r27
     fce:	66 27       	eor	r22, r22
     fd0:	77 27       	eor	r23, r23
     fd2:	cb 01       	movw	r24, r22
     fd4:	97 f9       	bld	r25, 7
     fd6:	08 95       	ret

00000fd8 <__mulsf3>:
     fd8:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3x>
     fdc:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_round>
     fe0:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_pscA>
     fe4:	38 f0       	brcs	.+14     	; 0xff4 <__mulsf3+0x1c>
     fe6:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscB>
     fea:	20 f0       	brcs	.+8      	; 0xff4 <__mulsf3+0x1c>
     fec:	95 23       	and	r25, r21
     fee:	11 f0       	breq	.+4      	; 0xff4 <__mulsf3+0x1c>
     ff0:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_inf>
     ff4:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_nan>
     ff8:	11 24       	eor	r1, r1
     ffa:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_szero>

00000ffe <__mulsf3x>:
     ffe:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_split3>
    1002:	70 f3       	brcs	.-36     	; 0xfe0 <__mulsf3+0x8>

00001004 <__mulsf3_pse>:
    1004:	95 9f       	mul	r25, r21
    1006:	c1 f3       	breq	.-16     	; 0xff8 <__mulsf3+0x20>
    1008:	95 0f       	add	r25, r21
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	55 1f       	adc	r21, r21
    100e:	62 9f       	mul	r22, r18
    1010:	f0 01       	movw	r30, r0
    1012:	72 9f       	mul	r23, r18
    1014:	bb 27       	eor	r27, r27
    1016:	f0 0d       	add	r31, r0
    1018:	b1 1d       	adc	r27, r1
    101a:	63 9f       	mul	r22, r19
    101c:	aa 27       	eor	r26, r26
    101e:	f0 0d       	add	r31, r0
    1020:	b1 1d       	adc	r27, r1
    1022:	aa 1f       	adc	r26, r26
    1024:	64 9f       	mul	r22, r20
    1026:	66 27       	eor	r22, r22
    1028:	b0 0d       	add	r27, r0
    102a:	a1 1d       	adc	r26, r1
    102c:	66 1f       	adc	r22, r22
    102e:	82 9f       	mul	r24, r18
    1030:	22 27       	eor	r18, r18
    1032:	b0 0d       	add	r27, r0
    1034:	a1 1d       	adc	r26, r1
    1036:	62 1f       	adc	r22, r18
    1038:	73 9f       	mul	r23, r19
    103a:	b0 0d       	add	r27, r0
    103c:	a1 1d       	adc	r26, r1
    103e:	62 1f       	adc	r22, r18
    1040:	83 9f       	mul	r24, r19
    1042:	a0 0d       	add	r26, r0
    1044:	61 1d       	adc	r22, r1
    1046:	22 1f       	adc	r18, r18
    1048:	74 9f       	mul	r23, r20
    104a:	33 27       	eor	r19, r19
    104c:	a0 0d       	add	r26, r0
    104e:	61 1d       	adc	r22, r1
    1050:	23 1f       	adc	r18, r19
    1052:	84 9f       	mul	r24, r20
    1054:	60 0d       	add	r22, r0
    1056:	21 1d       	adc	r18, r1
    1058:	82 2f       	mov	r24, r18
    105a:	76 2f       	mov	r23, r22
    105c:	6a 2f       	mov	r22, r26
    105e:	11 24       	eor	r1, r1
    1060:	9f 57       	subi	r25, 0x7F	; 127
    1062:	50 40       	sbci	r21, 0x00	; 0
    1064:	9a f0       	brmi	.+38     	; 0x108c <__mulsf3_pse+0x88>
    1066:	f1 f0       	breq	.+60     	; 0x10a4 <__mulsf3_pse+0xa0>
    1068:	88 23       	and	r24, r24
    106a:	4a f0       	brmi	.+18     	; 0x107e <__mulsf3_pse+0x7a>
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	bb 1f       	adc	r27, r27
    1072:	66 1f       	adc	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	88 1f       	adc	r24, r24
    1078:	91 50       	subi	r25, 0x01	; 1
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	a9 f7       	brne	.-22     	; 0x1068 <__mulsf3_pse+0x64>
    107e:	9e 3f       	cpi	r25, 0xFE	; 254
    1080:	51 05       	cpc	r21, r1
    1082:	80 f0       	brcs	.+32     	; 0x10a4 <__mulsf3_pse+0xa0>
    1084:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__fp_inf>
    1088:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_szero>
    108c:	5f 3f       	cpi	r21, 0xFF	; 255
    108e:	e4 f3       	brlt	.-8      	; 0x1088 <__mulsf3_pse+0x84>
    1090:	98 3e       	cpi	r25, 0xE8	; 232
    1092:	d4 f3       	brlt	.-12     	; 0x1088 <__mulsf3_pse+0x84>
    1094:	86 95       	lsr	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	e7 95       	ror	r30
    10a0:	9f 5f       	subi	r25, 0xFF	; 255
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <__mulsf3_pse+0x90>
    10a4:	fe 2b       	or	r31, r30
    10a6:	88 0f       	add	r24, r24
    10a8:	91 1d       	adc	r25, r1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	97 f9       	bld	r25, 7
    10b0:	08 95       	ret

000010b2 <atoi>:
    10b2:	fc 01       	movw	r30, r24
    10b4:	88 27       	eor	r24, r24
    10b6:	99 27       	eor	r25, r25
    10b8:	e8 94       	clt
    10ba:	21 91       	ld	r18, Z+
    10bc:	20 32       	cpi	r18, 0x20	; 32
    10be:	e9 f3       	breq	.-6      	; 0x10ba <atoi+0x8>
    10c0:	29 30       	cpi	r18, 0x09	; 9
    10c2:	10 f0       	brcs	.+4      	; 0x10c8 <atoi+0x16>
    10c4:	2e 30       	cpi	r18, 0x0E	; 14
    10c6:	c8 f3       	brcs	.-14     	; 0x10ba <atoi+0x8>
    10c8:	2b 32       	cpi	r18, 0x2B	; 43
    10ca:	41 f0       	breq	.+16     	; 0x10dc <atoi+0x2a>
    10cc:	2d 32       	cpi	r18, 0x2D	; 45
    10ce:	39 f4       	brne	.+14     	; 0x10de <atoi+0x2c>
    10d0:	68 94       	set
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <atoi+0x2a>
    10d4:	0e 94 77 08 	call	0x10ee	; 0x10ee <__mulhi_const_10>
    10d8:	82 0f       	add	r24, r18
    10da:	91 1d       	adc	r25, r1
    10dc:	21 91       	ld	r18, Z+
    10de:	20 53       	subi	r18, 0x30	; 48
    10e0:	2a 30       	cpi	r18, 0x0A	; 10
    10e2:	c0 f3       	brcs	.-16     	; 0x10d4 <atoi+0x22>
    10e4:	1e f4       	brtc	.+6      	; 0x10ec <atoi+0x3a>
    10e6:	90 95       	com	r25
    10e8:	81 95       	neg	r24
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	08 95       	ret

000010ee <__mulhi_const_10>:
    10ee:	7a e0       	ldi	r23, 0x0A	; 10
    10f0:	97 9f       	mul	r25, r23
    10f2:	90 2d       	mov	r25, r0
    10f4:	87 9f       	mul	r24, r23
    10f6:	80 2d       	mov	r24, r0
    10f8:	91 0d       	add	r25, r1
    10fa:	11 24       	eor	r1, r1
    10fc:	08 95       	ret

000010fe <_exit>:
    10fe:	f8 94       	cli

00001100 <__stop_program>:
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <__stop_program>
